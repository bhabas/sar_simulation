cmake_minimum_required(VERSION 2.8.3)
cmake_policy(SET CMP0054 NEW)

project(crazyflie_gazebo)

## Add suport for C++11, supported in ROS Kinetic and newer
add_definitions(-std=c++11)


#######################################
## 3. Find packages needed for build ##
#######################################
## Find catkin macros and libraries
find_package(catkin REQUIRED COMPONENTS
  rospy
  roscpp
  std_msgs
  message_generation
  nav_msgs
  geometry_msgs
  gazebo_ros
)

find_package(Boost 1.58 REQUIRED COMPONENTS system thread filesystem)
find_package(gazebo REQUIRED)
find_package(Eigen3 QUIET)
if(EIGEN3_FOUND)
  message("!!!!!!!!!EIGEN3 FOUND!!!!!!")
endif()

# =================== PROTOBUF ================= #
# protobuf is required for converting /msgs/*.proto files to Gazebo messages
set(PROTOBUF_IMPORT_DIRS "")
foreach(ITR ${GAZEBO_INCLUDE_DIRS})
  if(ITR MATCHES ".*gazebo-[0-9.]+$")
    set(PROTOBUF_IMPORT_DIRS "${ITR}/gazebo/msgs/proto")
  endif()
endforeach()
message("!!!!!!!!!PROTOBUF_IMPORT_DIRS = " ${PROTOBUF_IMPORT_DIRS})

# WARNING: PROTOBUF_IMPORT_DIRS has to be set before find_package is called
find_package(Protobuf REQUIRED)
pkg_check_modules(PROTOBUF protobuf)

# Protobuf version check
if ("${PROTOBUF_VERSION}" VERSION_LESS "2.5.0")
  message(FATAL_ERROR "protobuf version: ${PROTOBUF_VERSION} not compatible, must be >= 2.5.0")
endif()
message("PROTOBUF_VERSION = " ${PROTOBUF_VERSION})

# After running this block of code,
# we should have something similar to
# GAZEBO_MSG_INCLUDE_DIRS = /usr/include/gazebo-7/gazebo/msgs
set(GAZEBO_MSG_INCLUDE_DIRS)
foreach(ITR ${GAZEBO_INCLUDE_DIRS})
  if(ITR MATCHES ".*gazebo-[0-9.]+$")
    set(GAZEBO_MSG_INCLUDE_DIRS "${ITR}/gazebo/msgs")
  endif()
endforeach()
message("!!!!!!!!!GAZEBO_INCLUDE_DIRS = " ${GAZEBO_INCLUDE_DIRS})
# link_libraries(${PROTOBUF_LIBRARY})
set(mav_msgs
  msgs/CommandMotorSpeed.proto
  msgs/MotorSpeed.proto
  )
set(sensor_msgs
  msgs/Float.proto
  )
message("!!!!!!!!!mav_msgs = " ${mav_msgs})

# Finally, generate the .cpp files from the .proto files in build/crazyflie_gazebo
PROTOBUF_GENERATE_CPP(MAV_PROTO_SRCS MAV_PROTO_HDRS ${mav_msgs})
PROTOBUF_GENERATE_CPP(SEN_PROTO_SRCS SEN_PROTO_HDRS ${sensor_msgs})

add_library(mav_msgs SHARED ${MAV_PROTO_SRCS})    # generate library file .so in build/crazyflie_gazebo
add_library(sensor_msgs SHARED ${SEN_PROTO_SRCS})
# target_link_libraries(mav_msgs ${PROTOBUF_LIBRARY} gazebo_msgs) # generate library file .so in devel/lib
link_libraries(mav_msgs sensor_msgs)


#####################################
## 4. Enable Python module support ##
#####################################


## System dependencies are found with CMake's conventions
# find_package(Boost REQUIRED COMPONENTS system)

##########################################
## 5. Message/Service/Action Generators ##
##########################################

## Generate messages in the 'msg' folder
 add_message_files(
   FILES
   JunkMSG.msg
 )

## Generate services in the 'srv' folder
# add_service_files(
#   FILES
#   Service1.srv
#   Service2.srv
# )

## Generate actions in the 'action' folder
# add_action_files(
#   FILES
#   Action1.action
#   Action2.action
# )

## Generate added messages and services with any dependencies listed here
 generate_messages(
   DEPENDENCIES
   std_msgs nav_msgs geometry_msgs# Or other packages containing msgs
 )

##################################################
## 6. Invoke message/service/action generations ##
##################################################


##########################################
## 7. Specify package build info export ##
##########################################
## The catkin_package macro generates cmake config files for your package
## Declare things to be passed to dependent projects
## INCLUDE_DIRS: uncomment this if you package contains header files
## LIBRARIES: libraries you create in this project that dependent projects also need
## CATKIN_DEPENDS: catkin_packages dependent projects also need
## DEPENDS: system dependencies of this project that dependent projects also need
catkin_package(
  INCLUDE_DIRS include
#  LIBRARIES drone_training
  CATKIN_DEPENDS rospy roscpp std_msgs nav_msgs geometry_msgs gazebo_ros
#  DEPENDS system_lib
)


#######################################
## 8. Libraries/Executables to build ##
#######################################

## Specify additional locations of header files
## Your package locations should be listed before other locations
# include_directories(include)
message("!!!!!catkin_INCLUDE_DIRS = " ${catkin_INCLUDE_DIRS})
message("!!!!!CMAKE_CURRENT_BINARY_DIR = " ${CMAKE_CURRENT_BINARY_DIR})
link_directories(${GAZEBO_LIBRARY_DIRS})
include_directories(
  include
  ${catkin_INCLUDE_DIRS}
  ${Boost_INCLUDE_DIR}
  ${CMAKE_CURRENT_BINARY_DIR}   # msg files generated by protobuf
  ${GAZEBO_MSG_INCLUDE_DIRS}
  ${GAZEBO_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
)

link_libraries(
  ${Boost_SYSTEM_LIBRARY_RELEASE}
  ${Boost_THREAD_LIBRARY_RELEASE}
  ${Boost_TIMER_LIBRARY_RELEASE}
  ${GAZEBO_LIBRARIES}
  ${GAZEBO_INCLUDE_DIRS}
)
## Declare a C++ library
# add_library(${PROJECT_NAME}
#   src/${PROJECT_NAME}/drone_training.cpp
# )
add_library(gazebo_motor_model SHARED src/gazebo_motor_model.cpp)
add_library(gazebo_mavlink SHARED src/gazebo_mavlink.cpp)
add_library(gazebo_sticky_foot SHARED src/gazebo_sticky_foot.cpp)

## Add cmake target dependencies of the library
## as an example, code may need to be generated before libraries
## either from message generation or dynamic reconfigure

## Declare a C++ executable
## With catkin_make all packages are built within a single CMake context
## The recommended prefix ensures that target names across packages don't collide
add_executable(controller src/controller.cpp)
add_executable(ceiling_ft_sensor src/ceiling_ft_rostopic_converter.cpp)


## Rename C++ executable without prefix
## The above recommended prefix causes long target names, the following renames the
## target back to the shorter version for ease of user use
## e.g. "rosrun someones_pkg node" instead of "rosrun someones_pkg someones_pkg_node"
# set_target_properties(${PROJECT_NAME}_node PROPERTIES OUTPUT_NAME node PREFIX "")

## Add cmake target dependencies of the executable
## same as for the library above
# add_dependencies(${PROJECT_NAME}_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
# add_dependencies(gazebo_motor_model mav_msgs gazebo_mavlink)
add_dependencies(controller include/${controller_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})

## Specify libraries to link a library or executable target against
# target_link_libraries(${PROJECT_NAME}_node
#   ${catkin_LIBRARIES}
# )
target_link_libraries(gazebo_motor_model ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${GAZEBO_LIBRARIES})
target_link_libraries(gazebo_mavlink ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${GAZEBO_LIBRARIES})
target_link_libraries(gazebo_sticky_foot ${catkin_LIBRARIES} ${Boost_LIBRARIES} ${GAZEBO_LIBRARIES})
target_link_libraries(controller ${catkin_LIBRARIES})
target_link_libraries(ceiling_ft_sensor ${catkin_LIBRARIES} ${GAZEBO_LIBRARIES})
#######################
## 9. Tests to build ##
#######################

## Add gtest based cpp test target and link libraries
# catkin_add_gtest(${PROJECT_NAME}-test test/test_drone_training.cpp)
# if(TARGET ${PROJECT_NAME}-test)
#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})
# endif()

## Add folders to be run by python nosetests
# catkin_add_nosetests(test)

#######################
## 10. Install rules ##
#######################

# all install targets should use catkin DESTINATION variables
# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html

## Mark executable scripts (Python etc.) for installation
## in contrast to setup.py, you can choose the destination
# install(PROGRAMS
#   scripts/my_python_script
#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )

## Mark executables and/or libraries for installation
# install(TARGETS ${PROJECT_NAME} ${PROJECT_NAME}_node
#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}
#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}
# )
message("!!!!!CMAKE_INSTALL_LIBDIR =" ${CMAKE_INSTALL_LIBDIR} "/" ${PROJECT_NAME})
#set(PLUGIN_PATH ${CMAKE_INSTALL_LIBDIR}/${PROJECT_NAME}/plugins)
#install(TARGETS gazebo_motor_model mav_msgs DESTINATION ${PLUGIN_PATH})

## Mark cpp header files for installation
# install(DIRECTORY include/${PROJECT_NAME}/
#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}
#   FILES_MATCHING PATTERN "*.h"
#   PATTERN ".svn" EXCLUDE
# )

## Mark other files for installation (e.g. launch and bag files, etc.)
# install(FILES
#   # myfile1
#   # myfile2
#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}
# )


